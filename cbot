#!/usr/bin/python3
import os
import openai
import sys    
import shutil 
import signal 
import argparse
from openai import OpenAI

# Color definitions for output formatting
RED = "\033[91m"    # Errors
BLUE = "\033[94m"   # Main output
GREEN = "\033[92m"  # Success messages
YELLOW = "\033[93m" # Prompts
RESET = "\033[0m"   # Reset formatting
BOLD = "\033[1m"    # Bold text

openai.api_key = os.getenv("OPENAI_API_KEY")

# Handle Ctrl+C gracefully
signal.signal(signal.SIGINT, signal.SIG_DFL)


def parse_arguments():
    # Set up command-line argument parser
    parser = argparse.ArgumentParser(description="Unix command assistant and general question answerer")
    parser.add_argument("query", nargs="?", help="The query for Unix commands or questions")
    parser.add_argument("-q", "--question", action="store_true", help="Ask a general question instead of requesting a Unix command")
    parser.add_argument("-x", "--execute", action="store_true", help="Execute the command (only for Unix command mode)")
    parser.add_argument("-c", "--copy", action="store_true", help="Copy the response to clipboard")
    parser.add_argument("-m", "--model", default="gpt-4o-mini", help="GPT model to use")
    return parser.parse_args()

def main():
    args = parse_arguments()
    
    if not args.query:
        print("Please provide a query. Use -h for help.")
        sys.exit(1)
    
    # Call appropriate GPT function based on query type
    if args.question:
        response = call_gpt_question(args.query, model=args.model)
    else:
        response = call_gpt_command(args.query, model=args.model)
    
    output(response, args)

def get_system_info():
    import platform
    import distro

    system = platform.system()
    if system == "Linux":
        distribution = distro.name(pretty=True)
        version = distro.version()
        return f"Linux Distribution: {distribution}, Version: {version}"
    elif system == "Darwin":
        mac_version = platform.mac_ver()[0]
        return f"macOS Version: {mac_version}"
    elif system == "Windows":
        win_version = platform.win32_ver()[0]
        return f"Windows Version: {win_version}"
    else:
        return f"Unknown OS: {system}"

def call_gpt_command(query, model="gpt-4o-mini"):
    # Call GPT for Unix command suggestions
    client = OpenAI()
    response = client.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": "You are a Unix command assistant. Only provide command line commands as responses, without any explanations, back ticks, or anything except command line input. System info: " + get_system_info()},
            {"role": "user", "content": query}
        ]
    )
    return response.choices[0].message.content

def call_gpt_question(question, model="gpt-4o-mini"):
    # Call GPT for general questions
    response = openai.chat.completions.create(
        model=model,
        messages=[
            {"role": "system", "content": "You are a helpful assistant. Provide concise and accurate answers to questions. System info: " + get_system_info()},
            {"role": "user", "content": question}
        ],
    )
    return response.choices[0].message.content

def output(response, args):
    if args.execute and not args.question:
        # Execute Unix command if requested
        print(f"{YELLOW}{BOLD}Press ENTER to execute:{RESET} {BLUE}{response}{RESET}")
        if input() == "":
            os.system(response)
        else:
            sys.exit(0)

    if args.copy:
        # Copy response to clipboard if requested
        if shutil.which("xclip") is None:
            print(f"{RED}Copying to clipboard requires xclip to be installed, please install xclip and try again{RESET}")
            sys.exit(1)
        os.system(f"echo \"{response}\" | xclip -selection clipboard")
        print(f"{BLUE}{response}{RESET}")
        print(f"{GREEN}Response copied to clipboard.{RESET}")
    
    if not args.copy and not (args.execute and not args.question):
        # Print response if not copying or executing
        print(f"{BLUE}{response}{RESET}")


if __name__ == "__main__":
    main()